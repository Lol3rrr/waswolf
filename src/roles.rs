use std::fmt::Display;

use serenity::model::channel::{Message, ReactionType};

mod cfg_reactions;

mod roles_msg;
pub use roles_msg::get_roles_msg;

mod distribute;
pub use distribute::distribute_roles;

use crate::rounds::BotContext;

pub async fn cfg_role_msg_reactions(
    message: &Message,
    ctx: &dyn BotContext,
    roles: &[WereWolfRole],
    page: usize,
) {
    let reactions = cfg_reactions::reactions(roles, page);
    for reaction in reactions {
        if let Err(e) = message.react(ctx.get_http(), reaction).await {
            tracing::error!("Adding Reaction: {:?}", e);
        }
    }
}

#[derive(Debug, PartialEq, Eq, PartialOrd, Ord, Clone)]
pub enum WereWolfRole {
    Werwolf,
    Amor,
    Gerber,
    HarterBursche,
    Hexe,
    Hure,
    Leibw√§chter,
    Seher,
    AlteVettel,
    AlterMann,
    Auss√§tzige,
    Beschw√∂rerin,
    Brandstifter,
    DoppelG√§ngerin,
    Geist,
    H√§ndler,
    J√§ger,
    Lynkanthrophin,
    Metzger,
    ParanormalerErmittler,
    Prinz,
    Priester,
    Trunkenbold(Option<Box<WereWolfRole>>),
    Russe,
    SeherLehrling,
    Strolch,
    UnruheStifter,
    Verfluchter,
    Zaubermeisterin,
    FreiMaurer,
    Vampire,
    EinsamerWolf,
    Wei√üerWolf,
}

impl Display for WereWolfRole {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Werwolf => write!(f, "Werwolf"),
            Self::Amor => write!(f, "Amor"),
            Self::Gerber => write!(f, "Gerber"),
            Self::HarterBursche => write!(f, "HarterBursche"),
            Self::Hexe => write!(f, "Hexe"),
            Self::Hure => write!(f, "Hure"),
            Self::Leibw√§chter => write!(f, "Leibw√§chter"),
            Self::Seher => write!(f, "Seher"),
            Self::AlteVettel => write!(f, "AlteVettel"),
            Self::AlterMann => write!(f, "AlterMann"),
            Self::Auss√§tzige => write!(f, "Auss√§tzige"),
            Self::Beschw√∂rerin => write!(f, "Beschw√∂rerin"),
            Self::Brandstifter => write!(f, "Brandstifter"),
            Self::DoppelG√§ngerin => write!(f, "DoppelG√§ngerin"),
            Self::Geist => write!(f, "Geist"),
            Self::H√§ndler => write!(f, "H√§ndler"),
            Self::J√§ger => write!(f, "J√§ger"),
            Self::Lynkanthrophin => write!(f, "Lynkanthrophin"),
            Self::Metzger => write!(f, "Metzger"),
            Self::ParanormalerErmittler => write!(f, "ParanormalerErmittler"),
            Self::Prinz => write!(f, "Prinz"),
            Self::Priester => write!(f, "Priester"),
            Self::Trunkenbold(_) => write!(f, "Trunkenbold"),
            Self::Russe => write!(f, "Russe"),
            Self::SeherLehrling => write!(f, "SeherLehrling"),
            Self::Strolch => write!(f, "Strolch"),
            Self::UnruheStifter => write!(f, "UnruheStifter"),
            Self::Verfluchter => write!(f, "Verfluchter"),
            Self::Zaubermeisterin => write!(f, "Zaubermeisterin"),
            Self::FreiMaurer => write!(f, "Freimaurer"),
            Self::Vampire => write!(f, "Vampire"),
            Self::EinsamerWolf => write!(f, "Einsamer Wolf"),
            Self::Wei√üerWolf => write!(f, "Wei√üer Wolf"),
        }
    }
}

impl WereWolfRole {
    pub fn all_roles() -> Vec<WereWolfRole> {
        vec![
            Self::Werwolf,
            Self::Amor,
            Self::Gerber,
            Self::HarterBursche,
            Self::Hexe,
            Self::Hure,
            Self::Leibw√§chter,
            Self::Seher,
            Self::AlteVettel,
            Self::AlterMann,
            Self::Auss√§tzige,
            Self::Beschw√∂rerin,
            Self::Brandstifter,
            Self::DoppelG√§ngerin,
            Self::Geist,
            Self::H√§ndler,
            Self::J√§ger,
            Self::Lynkanthrophin,
            Self::Metzger,
            Self::ParanormalerErmittler,
            Self::Prinz,
            Self::Priester,
            Self::Trunkenbold(None),
            Self::Russe,
            Self::SeherLehrling,
            Self::Strolch,
            Self::UnruheStifter,
            Self::Verfluchter,
            Self::Zaubermeisterin,
            Self::FreiMaurer,
            Self::Vampire,
            Self::EinsamerWolf,
            Self::Wei√üerWolf,
        ]
    }

    pub fn needs_multiple(&self) -> bool {
        matches!(self, Self::Werwolf | Self::FreiMaurer | Self::Vampire)
    }

    pub fn needs_other_role(&self) -> bool {
        matches!(self, Self::Trunkenbold(None))
    }

    pub const fn to_emoji(&self) -> char {
        match self {
            Self::Werwolf => 'üê∫',
            Self::Amor => 'üíõ',
            Self::Gerber => 'üá¨',
            Self::HarterBursche => 'üí™',
            Self::Hexe => 'üßô',
            Self::Hure => 'üè©',
            Self::Leibw√§chter => 'ü•∑',
            Self::Seher => 'üîÆ',
            Self::AlteVettel => 'üëµ',
            Self::AlterMann => 'üë¥',
            Self::Auss√§tzige => 'üá¶',
            Self::Beschw√∂rerin => 'ü§´',
            Self::Brandstifter => 'üî•',
            Self::DoppelG√§ngerin => 'üëØ',
            Self::Geist => 'üëª',
            Self::H√§ndler => 'üí∞',
            Self::J√§ger => 'üèπ',
            Self::Lynkanthrophin => 'üêà',
            Self::Metzger => 'üî™',
            Self::ParanormalerErmittler => 'üëÆ',
            Self::Prinz => 'ü§¥',
            Self::Priester => '‚õ™',
            Self::Trunkenbold(_) => 'üç∫',
            Self::Russe => 'ü™Ü',
            Self::SeherLehrling => 'üëÄ',
            Self::Strolch => 'üá∏',
            Self::UnruheStifter => 'üí•',
            Self::Verfluchter => 'üßü',
            Self::Zaubermeisterin => 'ü™Ñ',
            Self::FreiMaurer => 'üß±',
            Self::Vampire => 'üßõ',
            Self::EinsamerWolf => 'üêª',
            Self::Wei√üerWolf => 'ü¶ù',
        }
    }

    pub fn from_emoji(emoji: ReactionType) -> Option<WereWolfRole> {
        let mut data = emoji.as_data();
        match data.remove(0) {
            'üê∫' => Some(Self::Werwolf),
            'üíõ' => Some(Self::Amor),
            'üá¨' => Some(Self::Gerber),
            'üí™' => Some(Self::HarterBursche),
            'üßô' => Some(Self::Hexe),
            'üè©' => Some(Self::Hure),
            'ü•∑' => Some(Self::Leibw√§chter),
            'üîÆ' => Some(Self::Seher),
            'üëµ' => Some(Self::AlteVettel),
            'üë¥' => Some(Self::AlterMann),
            'üá¶' => Some(Self::Auss√§tzige),
            'ü§´' => Some(Self::Beschw√∂rerin),
            'üî•' => Some(Self::Brandstifter),
            'üëØ' => Some(Self::DoppelG√§ngerin),
            'üëª' => Some(Self::Geist),
            'üí∞' => Some(Self::H√§ndler),
            'üèπ' => Some(Self::J√§ger),
            'üêà' => Some(Self::Lynkanthrophin),
            'üî™' => Some(Self::Metzger),
            'üëÆ' => Some(Self::ParanormalerErmittler),
            'ü§¥' => Some(Self::Prinz),
            '‚õ™' => Some(Self::Priester),
            'üç∫' => Some(Self::Trunkenbold(None)),
            'ü™Ü' => Some(Self::Russe),
            'üëÄ' => Some(Self::SeherLehrling),
            'üá∏' => Some(Self::Strolch),
            'üí•' => Some(Self::UnruheStifter),
            'üßü' => Some(Self::Verfluchter),
            'ü™Ñ' => Some(Self::Zaubermeisterin),
            'üß±' => Some(Self::FreiMaurer),
            'üßõ' => Some(Self::Vampire),
            'üêª' => Some(Self::EinsamerWolf),
            'ü¶ù' => Some(Self::Wei√üerWolf),
            _ => None,
        }
    }

    pub fn channels(&self) -> Vec<String> {
        match self {
            Self::Werwolf => vec![format!("{}", self)],
            Self::Amor => vec![format!("{}", self)],
            Self::Gerber => vec![format!("{}", self)],
            Self::HarterBursche => vec![format!("{}", self)],
            Self::Hexe => vec![format!("{}", self)],
            Self::Hure => vec![format!("{}", self)],
            Self::Leibw√§chter => vec![format!("{}", self)],
            Self::Seher => vec![format!("{}", self)],
            Self::AlteVettel => vec![format!("{}", self)],
            Self::AlterMann => vec![format!("{}", self)],
            Self::Auss√§tzige => vec![format!("{}", self)],
            Self::Beschw√∂rerin => vec![format!("{}", self)],
            Self::Brandstifter => vec![format!("{}", self)],
            Self::DoppelG√§ngerin => vec![format!("{}", self)],
            Self::Geist => vec![format!("{}", self)],
            Self::H√§ndler => vec![format!("{}", self)],
            Self::J√§ger => vec![format!("{}", self)],
            Self::Lynkanthrophin => vec![format!("{}", self)],
            Self::Metzger => vec![format!("{}", self)],
            Self::ParanormalerErmittler => vec![format!("{}", self)],
            Self::Prinz => vec![format!("{}", self)],
            Self::Priester => vec![format!("{}", self)],
            Self::Trunkenbold(_) => vec![format!("{}", self)],
            Self::Russe => vec![format!("{}", self)],
            Self::SeherLehrling => vec![format!("{}", self)],
            Self::Strolch => vec![format!("{}", self)],
            Self::UnruheStifter => vec![format!("{}", self)],
            Self::Verfluchter => vec![format!("{}", self)],
            Self::Zaubermeisterin => vec![format!("{}", self)],
            Self::FreiMaurer => vec![format!("{}", self)],
            Self::Vampire => vec![format!("{}", self)],
            Self::EinsamerWolf => vec![format!("{}", self), format!("{}", Self::Werwolf)],
            Self::Wei√üerWolf => vec![format!("{}", self), format!("{}", Self::Werwolf)],
        }
    }
}
